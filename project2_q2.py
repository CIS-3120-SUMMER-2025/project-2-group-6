# -*- coding: utf-8 -*-
"""Project2_Q2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19nTm3g2hx4ygggOS6FSoqJUvOuoXnfG9
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import urllib3
import math
import numpy as np

# Set the URLs for vollyball team and swimming team
volleyball_teams = {
                  'mens_volleyball': ["https://ccnyathletics.com/sports/mens-volleyball/roster", "https://lehmanathletics.com/sports/mens-volleyball/roster", "https://www.brooklyncollegeathletics.com/sports/mens-volleyball/roster", "https://johnjayathletics.com/sports/mens-volleyball/roster", "https://athletics.baruch.cuny.edu/sports/mens-volleyball/roster", "https://mecathletics.com/sports/mens-volleyball/rostser", "https://www.huntercollegeathletics.com/sports/mens-volleyball/roster", "https://yorkathletics.com/sports/mens-volleyball/roster"],
                  'womens_volleyball': ["https://bmccathletics.com/sports/womens-volleyball/roster", "https://yorkathletics.com/sports/womens-volleyball/roster", "https://hostosathletics.com/sports/womens-volleyball/roster", "https://bronxbroncos.com/sports/womens-volleyball/roster/2021", "https://queensknights.com/sports/womens-volleyball/roster", "https://augustajags.com/sports/wvball/roster", "https://flaglerathletics.com/sports/womens-volleyball/roster", "https://pacersports.com/sports/womens-volleyball/roster", "https://www.golhu.com/sports/womens-volleyball/roster"]

                }

swimming_teams = {
                  'mens_swimming': ["https://csidolphins.com/sports/mens-swimming-and-diving/roster/2023-2024?view=2", "https://yorkathletics.com/sports/mens-swimming-and-diving/roster", "https://athletics.baruch.cuny.edu/sports/mens-swimming-and-diving/roster", "https://www.brooklyncollegeathletics.com/sports/mens-swimming-and-diving/roster", "https://lindenwoodlions.com/sports/mens-swimming-and-diving/roster", "https://mckbearcats.com/sports/mens-swimming-and-diving/roster", "https://ramapoathletics.com/sports/mens-swimming-and-diving/roster", "https://oneontaathletics.com/sports/mens-swimming-and-diving/roster", "https://bubearcats.com/sports/mens-swimming-and-diving/roster/2021-22", "https://albrightathletics.com/sports/mens-swimming-and-diving/roster/2021-22"],
                  'womens_swimming': ["https://csidolphins.com/sports/womens-swimming-and-diving/roster", "https://queensknights.com/sports/womens-swimming-and-diving/roster", "https://yorkathletics.com/sports/womens-swimming-and-diving/roster", "https://athletics.baruch.cuny.edu/sports/womens-swimming-and-diving/roster/2021-22?path=wswim", "https://www.brooklyncollegeathletics.com/sports/womens-swimming-and-diving/roster", "https://lindenwoodlions.com/sports/womens-swimming-and-diving/roster", "https://mckbearcats.com/sports/womens-swimming-and-diving/roster", "https://ramapoathletics.com/sports/womens-swimming-and-diving/roster", "https://keanathletics.com/sports/womens-swimming-and-diving/roster", "https://oneontaathletics.com/sports/womens-swimming-and-diving/roster"]

                }

# Set the URLs for each team

menvolly_ccny = "https://ccnyathletics.com/sports/mens-volleyball/roster"
menvolly_lehman ="https://lehmanathletics.com/sports/mens-volleyball/roster"
menvolly_brkln="https://www.brooklyncollegeathletics.com/sports/mens-volleyball/roster"
menvolly_johnjay="https://johnjayathletics.com/sports/mens-volleyball/roster"
menvolly_baruch="https://athletics.baruch.cuny.edu/sports/mens-volleyball/roster"
menvolly_medgar="https://mecathletics.com/sports/mens-volleyball/roster"
menvolly_hunter="https://www.huntercollegeathletics.com/sports/mens-volleyball/roster"
menvolly_york="https://yorkathletics.com/sports/mens-volleyball/roster"

men_vollyeball_url = [menvolly_ccny, menvolly_lehman, menvolly_brkln, menvolly_johnjay, menvolly_baruch, menvolly_medgar, menvolly_hunter, menvolly_york]


menswim_csi="https://csidolphins.com/sports/mens-swimming-and-diving/roster/2023-2024?view=2"
menswim_york="https://yorkathletics.com/sports/mens-swimming-and-diving/roster"
menswim_baruch="https://athletics.baruch.cuny.edu/sports/mens-swimming-and-diving/roster"
menswim_brkln="https://www.brooklyncollegeathletics.com/sports/mens-swimming-and-diving/roster"
menswim_liden="https://lindenwoodlions.com/sports/mens-swimming-and-diving/roster"
menswim_mckendree="https://mckbearcats.com/sports/mens-swimming-and-diving/roster"
menswim_rampo="https://ramapoathletics.com/sports/mens-swimming-and-diving/roster"
menswim_sunyoneota="https://oneontaathletics.com/sports/mens-swimming-and-diving/roster"
menswim_sunybht="https://bubearcats.com/sports/mens-swimming-and-diving/roster/2021-22"
menswim_albright="https://albrightathletics.com/sports/mens-swimming-and-diving/roster/2021-22"

men_swimming_url = [menswim_csi, menswim_york, menswim_baruch, menswim_brkln, menswim_liden, menswim_mckendree, menswim_rampo, menswim_sunyoneota, menswim_sunybht, menswim_albright]

womenvolly_bmcc = "https://bmccathletics.com/sports/womens-volleyball/roster"
womenvolly_york = "https://yorkathletics.com/sports/womens-volleyball/roster"
womenvolly_hostos = "https://hostosathletics.com/sports/womens-volleyball/roster"
womenvolly_bronx = "https://bronxbroncos.com/sports/womens-volleyball/roster/2021"
womenvolly_queens = "https://queensknights.com/sports/womens-volleyball/roster"
womenvolly_augusta = "https://augustajags.com/sports/wvball/roster"
womenvolly_flagler = "https://flaglerathletics.com/sports/womens-volleyball/roster"
womenvolly_usca = "https://pacersports.com/sports/womens-volleyball/roster"
womenvolly_lhu = "https://www.golhu.com/sports/womens-volleyball/roster"

women_vollyeball_url = [womenvolly_bmcc, womenvolly_york, womenvolly_hostos, womenvolly_bronx, womenvolly_queens, womenvolly_augusta, womenvolly_flagler, womenvolly_usca, womenvolly_lhu]

womenswim_csi = "https://csidolphins.com/sports/womens-swimming-and-diving/roster"
womenswim_queens = "https://queensknights.com/sports/womens-swimming-and-diving/roster"
womenswim_york = "https://yorkathletics.com/sports/womens-swimming-and-diving/roster"
womenswim_baruch = "https://athletics.baruch.cuny.edu/sports/womens-swimming-and-diving/roster/2021-22?path=wswim"
womenswim_brkln = "https://www.brooklyncollegeathletics.com/sports/womens-swimming-and-diving/roster"
womenswim_lindenwood = "https://lindenwoodlions.com/sports/womens-swimming-and-diving/roster"
womenswim_mckendree = "https://mckbearcats.com/sports/womens-swimming-and-diving/roster"
womenswim_ramapo = "https://ramapoathletics.com/sports/womens-swimming-and-diving/roster"
womenswim_kean = "https://keanathletics.com/sports/womens-swimming-and-diving/roster"
womenswim_oneonta = "https://oneontaathletics.com/sports/womens-swimming-and-diving/roster"

women_swimming_url = [womenswim_csi, womenswim_queens, womenswim_york, womenswim_baruch, womenswim_brkln, womenswim_lindenwood, womenswim_mckendree, womenswim_ramapo, womenswim_kean, womenswim_oneonta]

# Creating a function to scrape on URLs

volleyball_men_names = []
volleyball_men_heights =[]
volleyball_women_names = []
volleyball_women_heights =[]

swimming_men_names =[]
swimming_men_heights =[]
swimming_women_names =[]
swimming_women_heights =[]

"""# Whenever we need to clean the variables
volleyball_men_names.clear()
volleyball_men_heights.clear()
volleyball_women_names.clear()
volleyball_women_heights.clear()
swimming_men_names.clear()
swimming_men_heights.clear()
swimming_women_names.clear()
swimming_women_heights.clear()
"""

def scrape_team(url):

  #for url in men_volleyball_url:

  headers = {
  'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36',
  'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'Accept-Language': 'en-US,en;q=0.9',
  'Connection': 'keep-alive'
  }

  # making a request to the server
  page = requests.get(url, headers=headers, verify = False)
  urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

  names =[]
  heights =[]

  # Check if the connection is successful
  if page.status_code == 200:
    soup = BeautifulSoup(page.text, 'html.parser')

  # Find all td tags with names and heights
    name_tags = soup.find_all('td', class_='sidearm-table-player-name')
    raw_heights = soup.find_all('td', class_='height')

  # Extracting the names from name_tags
    for name_tag in name_tags:
      names.append(name_tag.get_text().strip())

  # Extracting the heights from the raw heights and split the string by text '-'
    for height in raw_heights:
      adhoc_heights = height.get_text().split('-')

  # if there's a missing value, put nan
      if len(adhoc_heights) > 1 and adhoc_heights[0] and adhoc_heights[1]:
        feet = int(adhoc_heights[0]) * 12
        inch = int(adhoc_heights[1])
        height_inches = feet + inch
      else:
        height_inches = math.nan

    # append the values to a list
      heights.append(height_inches)

  return names, heights

# Volleyball loop
for gender, urls in volleyball_teams.items():
  for url in urls:
    names, heights = scrape_team(url)
    if gender == 'mens_volleyball':
      volleyball_men_names.extend(names)
      volleyball_men_heights.extend(heights)
    elif gender == 'womens_volleyball':
      volleyball_women_names.extend(names)
      volleyball_women_heights.extend(heights)

# Swimming loop
for gender, urls in swimming_teams.items():
  for url in urls:
    names, heights = scrape_team(url)
    if gender == 'mens_swimming':
      swimming_men_names.extend(names)
      swimming_men_heights.extend(heights)
    elif gender == 'womens_swimming':
      swimming_women_names.extend(names)
      swimming_women_heights.extend(heights)



# Organize the data as a dictionary and need to make it a series to avoid lenght matching error for df

  volleyball_players = {
            'Men_name': pd.Series(volleyball_men_names),
            'Men_height': pd.Series(volleyball_men_heights),
            'Women_name': pd.Series(volleyball_women_names),
            'Women_height': pd.Series(volleyball_women_heights)
}

  swimming_players = {
            'Men_name': pd.Series(swimming_men_names),
            'Men_height': pd.Series(swimming_men_heights),
            'Women_name':  pd.Series(swimming_women_names),
            'Women_height': pd.Series(swimming_women_heights)
}

# check elements in the dictionaries
print((swimming_players["Men_name"]))

volleyball_players_df = pd.DataFrame(volleyball_players)
swimming_players_df = pd.DataFrame(swimming_players)

volleyball_players_df.head()

swimming_players_df.head()

volleyball_players_df.to_csv("Volleyball_Players.csv", index=False)
swimming_players_df.to_csv("Swimming_Players.csv", index=False)

swim = pd.read_csv("Swimming_Players.csv")
vball = pd.read_csv("Volleyball_Players.csv")

men_swim = swim[["Men_name", "Men_height"]].dropna()
women_swim = swim[["Women_name", "Women_height"]].dropna()
men_vball = vball[["Men_name", "Men_height"]].dropna()
women_vball = vball[["Women_name", "Women_height"]].dropna()

men_swim.columns = ["name", "height_in"]
women_swim.columns = ["name", "height_in"]
men_vball.columns = ["name", "height_in"]
women_vball.columns = ["name", "height_in"]

men_swim.to_csv("men_swimming.csv", index=False)
women_swim.to_csv("women_swimming.csv", index=False)
men_vball.to_csv("men_volleyball.csv", index=False)
women_vball.to_csv("women_volleyball.csv", index=False)

avg_men_swim = men_swim["height_in"].mean()
avg_women_swim = women_swim["height_in"].mean()
avg_men_vball = men_vball["height_in"].mean()
avg_women_vball = women_vball["height_in"].mean()

print("Average Men Swim Height:", avg_men_swim)
print("Average Women Swim Height:", avg_women_swim)
print("Average Men Volleyball Height:", avg_men_vball)
print("Average Women Volleyball Height:", avg_women_vball)

print("Tallest Men Swimmers:")
print(men_swim.nlargest(5, "height_in"))

print("Shortest Men Swimmers:")
print(men_swim.nsmallest(5, "height_in"))

print("Tallest Women Swimmers:")
print(women_swim.nlargest(5, "height_in"))

print("Shortest Women Swimmers:")
print(women_swim.nsmallest(5, "height_in"))

print("Tallest Men Volleyball Players:")
print(men_vball.nlargest(5, "height_in"))

print("Shortest Men Volleyball Players:")
print(men_vball.nsmallest(5, "height_in"))

print("Tallest Women Volleyball Players:")
print(women_vball.nlargest(5, "height_in"))

print("Shortest Women Volleyball Players:")
print(women_vball.nsmallest(5, "height_in"))

